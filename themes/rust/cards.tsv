category	question	answer
基础概念	Rust 的主要特点是什么？	Rust 的主要特点包括：1. 内存安全（无需垃圾回收）2. 零成本抽象 3. 所有权系统 4. 并发安全 5. 模式匹配 6. 类型推断 7. 无空值（使用 Option 类型）8. 强大的编译时检查
所有权系统	解释 Rust 的所有权系统	Rust 的所有权系统是其内存安全的核心。它基于三条规则：1. 每个值都有一个所有者 2. 一个值同时只能有一个所有者 3. 当所有者离开作用域，值将被丢弃。通过所有权转移、借用和生命周期，Rust 在编译时保证内存安全
数据类型	什么是 Rust 中的借用（Borrowing）？	借用是 Rust 中的一种机制，允许在不转移所有权的情况下使用值。有两种借用：1. 不可变借用（&T）：允许读取但不能修改 2. 可变借用（&mut T）：允许读取和修改。Rust 的借用检查器确保借用的安全性
数据类型	Rust 中的生命周期（Lifetime）是什么？	生命周期是 Rust 中的一种注解，用于确保引用在使用时始终有效。它们帮助编译器追踪引用的有效范围，防止悬垂引用。生命周期参数通常以撇号开头（如 'a）
并发编程	Rust 如何保证并发安全？	Rust 通过所有权和类型系统在编译时防止数据竞争。它提供了多种并发原语：1. Arc（原子引用计数）用于线程间共享数据 2. Mutex 和 RwLock 用于互斥访问 3. Send 和 Sync trait 用于类型安全 4. channel 用于线程间通信
错误处理	Rust 中的错误处理机制有哪些？	Rust 使用 Result<T, E> 和 Option<T> 类型进行错误处理。Result 表示可能成功（Ok）或失败（Err）的操作，Option 表示可能存在（Some）或不存在（None）的值。? 运算符用于简化错误传播
内存管理	Rust 如何管理内存？	Rust 通过所有权系统在编译时管理内存，无需垃圾回收。当变量离开作用域时，其资源会自动释放。这种方式称为 RAII（资源获取即初始化）。Rust 也提供 Box、Rc 和 Arc 等智能指针类型
特性	什么是 Rust 的 trait？	trait 是 Rust 中定义共享行为的方式，类似于其他语言中的接口。trait 可以有默认实现，支持静态分发和动态分发。trait 对象（如 &dyn Trait）用于运行时多态
宏	Rust 宏系统的作用是什么？	Rust 宏是元编程的一种形式，允许编写生成代码的代码。宏分为声明式宏（macro_rules!）和过程宏。宏可以减少重复代码、创建领域特定语言、实现编译时代码生成
性能优化	Rust 中的零成本抽象是什么？	零成本抽象是指 Rust 的高级抽象在运行时不会带来额外开销。例如，迭代器、闭包、trait 等在编译后会优化为高效的机器码，性能与手写的低级代码相当
工具链	Cargo 的主要功能有哪些？	Cargo 是 Rust 的包管理器和构建系统。主要功能包括：1. 依赖管理 2. 构建项目 3. 运行测试 4. 生成文档 5. 发布 crate 6. 工作空间管理 7. 自定义构建脚本
异步编程	Rust 中的异步编程模型是什么？	Rust 使用 Future trait 和 async/await 语法进行异步编程。async 函数返回 Future，可以使用 .await 等待其完成。tokio 和 async-std 等运行时库提供执行器和异步 I/O 原语
