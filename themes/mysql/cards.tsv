category	question	answer
基础概念	MySQL 的架构是怎样的？	MySQL 采用分层架构：\n1. 连接层：处理客户端连接、授权认证\n2. 服务层：查询解析、优化、缓存\n3. 引擎层：存储引擎（InnoDB、MyISAM等）\n4. 存储层：文件系统
基础概念	为什么 MySQL 使用 B+ 树而不是 B 树作为索引结构？	B+ 树相比 B 树的优势：\n1. 非叶子节点只存储键值，不存储数据，可以存储更多索引\n2. 叶子节点通过指针相连，支持范围查询\n3. 所有数据都在叶子节点，查询效率更稳定\n4. 更适合磁盘存储，减少 I/O 次数
事务与锁	什么是事务的 ACID 特性？	ACID 特性：\n1. 原子性(Atomicity)：事务要么全部完成，要么全部不完成\n2. 一致性(Consistency)：事务执行前后数据库状态保持一致\n3. 隔离性(Isolation)：事务之间互不干扰\n4. 持久性(Durability)：事务完成后对数据库的修改是永久的
事务与锁	MySQL 的事务隔离级别有哪些？各有什么特点？	隔离级别从低到高：\n1. 读未提交(Read Uncommitted)：可能读到未提交的数据\n2. 读已提交(Read Committed)：只能读到已提交的数据\n3. 可重复读(Repeatable Read)：同一事务内多次读取结果一致\n4. 串行化(Serializable)：完全串行执行，避免并发问题
事务与锁	什么是 MVCC？它是如何实现的？	MVCC (多版本并发控制)：\n1. 通过版本链实现，每个记录包含创建版本号和删除版本号\n2. 读操作只读取创建版本号小于等于当前事务版本号且删除版本号大于当前事务版本号的记录\n3. 写操作会创建新版本，原版本标记为删除\n4. 优点：提高并发性能，避免读写冲突
事务与锁	什么是幻读？如何解决幻读问题？	幻读：同一事务内，多次查询返回的结果集不一致\n解决方案：\n1. 使用串行化隔离级别\n2. 使用 Next-Key Lock（间隙锁+记录锁）\n3. 使用 MVCC + 版本控制
索引优化	MySQL 有哪些索引类型？各有什么特点？	索引类型：\n1. 主键索引：唯一且非空，InnoDB 的聚簇索引\n2. 唯一索引：列值唯一\n3. 普通索引：基本的索引类型\n4. 联合索引：多列组合的索引\n5. 全文索引：用于全文搜索\n6. 空间索引：用于地理空间数据
索引优化	如何优化 MySQL 索引？	索引优化原则：\n1. 选择合适的索引列：高选择性、频繁查询的列\n2. 避免冗余索引：删除重复或很少使用的索引\n3. 使用覆盖索引：查询字段都在索引中\n4. 注意索引长度：过长的索引影响性能\n5. 定期维护索引：分析、优化、重建
存储引擎	InnoDB 存储引擎的主要特点是什么？	InnoDB 特点：\n1. 支持事务和 ACID 特性\n2. 使用 MVCC 实现并发控制\n3. 支持行级锁\n4. 使用聚簇索引存储数据\n5. 支持外键约束\n6. 支持崩溃恢复
存储引擎	redo log 和 undo log 的作用是什么？	redo log：\n1. 记录事务对数据页的物理修改\n2. 用于崩溃恢复\n3. 实现事务的持久性\n\nundo log：\n1. 记录事务修改前的数据\n2. 用于事务回滚\n3. 实现 MVCC 的版本链
性能优化	如何优化 MySQL 查询性能？	查询优化方法：\n1. 使用 EXPLAIN 分析查询执行计划\n2. 优化索引使用\n3. 避免全表扫描\n4. 使用合适的连接方式\n5. 优化子查询\n6. 使用缓存\n7. 合理使用分页
性能优化	什么是分库分表？如何实现？	分库分表：\n1. 水平分表：按行拆分，解决单表数据量过大\n2. 垂直分表：按列拆分，解决字段过多\n3. 分库：按业务拆分，解决单库压力\n实现方式：\n1. 应用层分片\n2. 中间件分片（如 MyCat、ShardingSphere）\n3. 数据库代理
高级特性	什么是 binlog？它有什么作用？	binlog（二进制日志）：\n1. 记录所有修改数据库的 SQL 语句\n2. 用于主从复制\n3. 用于数据恢复\n4. 支持三种格式：STATEMENT、ROW、MIXED
高级特性	MySQL 主从复制的原理是什么？	主从复制原理：\n1. 主库记录 binlog\n2. 从库 I/O 线程读取主库 binlog\n3. 从库 SQL 线程执行 binlog 中的 SQL\n4. 支持异步、半同步、全同步复制 