问题	答案	front	back	category	tags
Golang 的主要特点是什么？	Golang 的主要特点包括：1. 简洁的语法 2. 内置并发支持（goroutine 和 channel）3. 垃圾回收 4. 静态类型 5. 编译型语言 6. 跨平台支持 7. 标准库丰富	Go语言中new和make的区别？	new用于分配内存并返回指针，make用于初始化slice、map和channel等引用类型。new返回指针，make返回初始化后的类型。	语法	内存分配,指针
什么是 goroutine？	goroutine 是 Go 语言中的轻量级线程，由 Go 运行时管理。它比传统线程更轻量，创建和销毁的开销更小。goroutine 通过 go 关键字启动，可以并发执行	channel 是什么？	channel 是 Go 语言中用于 goroutine 之间通信的管道。它提供了同步机制，确保数据的安全传输。channel 可以是带缓冲的或不带缓冲的	Go中对nil的Slice和空Slice的处理是一致的吗?	不一致。nil Slice没有底层数组，而空Slice有底层数组但长度为0。nil Slice可以直接append，而空Slice需要先make。	语法	slice,内存
Golang 中的 defer 关键字有什么作用？	defer 用于延迟执行函数调用，通常用于资源清理（如关闭文件、释放锁等）。defer 语句会在函数返回前执行，多个 defer 语句会按照后进先出的顺序执行。	Go的Struct能不能比较？	可以比较，但需要满足：1. 结构体字段都是可比较类型；2. 不包含不可比较的字段（如map、slice、func等）。	语法	结构体,比较
Golang 中的接口是什么？	接口是 Go 语言中的一种类型，它定义了一组方法签名。任何实现了这些方法的类型都自动实现了该接口。接口提供了抽象和多态的能力	Go语言函数传参是值类型还是引用类型？	默认是值传递，但slice、map、channel、interface等是引用类型。	数据类型	参数传递
Golang 中的指针和引用有什么区别？	Go 语言中没有引用类型，只有指针类型。指针存储的是内存地址，而引用是 C++ 中的概念。Go 的指针提供了直接访问内存的能力，但比 C 语言中的指针更安全	两个interface可以比较吗？	可以，但需要满足：1. 类型相同；2. 值可比较。	数据类型	interface,比较
什么是 Go 的垃圾回收机制？	Go 使用三色标记清除算法进行垃圾回收。它会自动管理内存，程序员不需要手动释放内存	Go的Slice如何扩容？	当容量不足时，会创建新数组，容量翻倍（cap<1024）或增长25%（cap>=1024）。	数据类型	slice,内存
Golang 中的 map 是如何实现的？	Go 的 map 是基于哈希表实现的。它提供了 O(1) 的平均时间复杂度。map 是引用类型，使用前需要初始化。map 的键必须是可比较的类型	Go中的map如何实现顺序读取？	map本身无序，需要先将key排序后遍历。可以使用sort包对key排序。	数据类型	map,排序
Golang 中的切片和数组有什么区别？	数组是固定长度的，而切片是动态长度的。切片是对数组的引用，它包含指向底层数组的指针、长度和容量。切片可以动态增长，使用 append 函数	Go中两个Nil可能不相等吗？	可能。interface类型的nil比较需要考虑具体类型。	数据类型	nil,interface
Golang 中的并发控制有哪些方式？	Go 提供了多种并发控制方式：1. channel 2. sync.Mutex 3. sync.RWMutex 4. sync.WaitGroup 5. sync.Once 6. atomic 包	乐观锁和悲观锁的区别	乐观锁假设冲突少，先操作后检查；悲观锁假设冲突多，先加锁后操作。	并发编程	锁
channel源码实现	基于环形队列实现，包含发送队列、接收队列和缓冲区。	并发编程	channel	channel线程安全的原理	通过互斥锁和条件变量保证线程安全。	并发编程	channel,线程安全
协程和线程的区别	协程更轻量，由Go运行时调度；线程由OS调度，更重量级。	并发编程	goroutine,线程	GPM模型	Go的调度器模型：G(goroutine)、P(processor)、M(machine)。	并发编程	调度
Context原理	用于控制goroutine的生命周期，实现取消、超时等功能。	并发编程	context	逃逸分析	编译器分析变量是否逃逸到堆上，优化内存分配。	内存管理	编译器,内存
GC触发条件	1. 内存分配达到阈值；2. 定期触发；3. 手动触发。	内存管理	GC	三色标记法	Go的GC算法：白色(未访问)、灰色(待访问)、黑色(已访问)。	内存管理	GC
反射原理	通过类型信息和值信息实现运行时类型检查和操作。	标准库	反射	sync.Map原理	使用两个map实现，一个用于读，一个用于写，减少锁竞争。	标准库	并发
pprof使用	性能分析工具，可以分析CPU、内存、goroutine等。	性能优化	工具	内存对齐	结构体字段按照类型大小对齐，提高访问效率。	内存管理	优化 